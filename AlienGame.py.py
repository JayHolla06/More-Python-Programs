# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dSdJwQrACYZA091PxqDWyCb_DFOgY0aD
"""

import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Set up screen and colors
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Space Shooter")

# Set up clock
clock = pygame.time.Clock()

# Define the ship class
class Ship:
    def __init__(self):
        # Load the ship image (make sure the image is in the same directory as this script)
        self.image = pygame.image.load('SpaceShipSmall.png')  # Ship image: 'SpaceShipSmall.png'
        self.rect = self.image.get_rect()  # Get the dimensions of the image
        self.rect.center = (screen_width // 2, screen_height - 50)  # Position the ship
        self.speed = 5

    def move(self, keys):
        # Move the ship based on key presses
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.right < screen_width:
            self.rect.x += self.speed

# Define the Bullet class
class Bullet:
    def __init__(self, x, y):
        self.image = pygame.image.load('bullet.png')  # Bullet image: 'bullet.png'
        self.image = pygame.transform.scale(self.image, (15, 25 ))  # Scale the bullet image smaller
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.speed = 7

    def move(self):
        self.rect.y -= self.speed  # Move the bullet upwards

# Define the Alien class
class Alien:
    def __init__(self):
        self.image = pygame.image.load('Alien_1.png')  # Alien image: 'Alien_1.png'
        self.image = pygame.transform.scale(self.image, (40, 40))  # Scale the alien image bigger
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - self.rect.width)
        self.rect.y = random.randint(-150, -50)
        self.speed = random.randint(1, 3)

    def move(self):
        self.rect.y += self.speed  # Move the alien downwards

# Set up game variables
score = 0
high_score = 0
start_ticks = pygame.time.get_ticks()  # Timer starts as soon as the game begins
font = pygame.font.SysFont(None, 36)
ship = Ship()
bullets = []
aliens = []
alien_spawn_time = 50  # How often to spawn new aliens

# Function to display text on screen
def display_text(text, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

# Main game loop
running = True
while running:
    screen.fill((0, 0, 255))  # Clear the screen with a solid blue background (RGB color for blue)
    keys = pygame.key.get_pressed()

    # Check for events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:  # Check if spacebar is pressed
                # Create a new bullet when spacebar is pressed
                bullet = Bullet(ship.rect.centerx, ship.rect.top)
                bullets.append(bullet)

    # Move the ship
    ship.move(keys)

    # Spawn aliens
    if random.randint(1, alien_spawn_time) == 1:
        aliens.append(Alien())

    # Move and draw bullets
    for bullet in bullets[:]:
        bullet.move()
        if bullet.rect.bottom < 0:  # If the bullet moves off the top of the screen
            bullets.remove(bullet)
        screen.blit(bullet.image, bullet.rect)

    # Move and draw aliens
    for alien in aliens[:]:
        alien.move()
        if alien.rect.top > screen_height:  # If the alien goes off the bottom of the screen
            aliens.remove(alien)
        if alien.rect.colliderect(ship.rect):  # Game over condition if an alien hits the ship
            running = False
        screen.blit(alien.image, alien.rect)

    # Check if bullets hit aliens
    for bullet in bullets[:]:
        for alien in aliens[:]:
            if bullet.rect.colliderect(alien.rect):
                aliens.remove(alien)
                bullets.remove(bullet)
                score += 10
                break

    # Draw the ship (using the loaded image)
    screen.blit(ship.image, ship.rect)

    # Display the score
    display_text(f"Score: {score}", (255, 255, 255), 10, 10)

    # Display the high score
    display_text(f"High Score: {high_score}", (255, 255, 255), screen_width - 150, 10)

    # Display the timer
    seconds = (pygame.time.get_ticks() - start_ticks) // 1000
    display_text(f"Time: {seconds}s", (255, 255, 255), 10, 40)

    # Update the high score
    if score > high_score:
        high_score = score

    # Update the display
    pygame.display.update()

    # Frame rate
    clock.tick(60)

# Quit the game
pygame.quit()