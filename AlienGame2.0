import pygame
import random
import time

# Initialize Pygame
pygame.init()

# Set up screen and colors
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Space Shooter")

# Set up clock
clock = pygame.time.Clock()

# Load background image (Parallax effect)
background = pygame.image.load('Parallax60.png')  # Make sure this file is in the same directory
background = pygame.transform.scale(background, (screen_width, screen_height))  # Scale the image if necessary

# Load sound effect for bullet shooting
bullet_sound = pygame.mixer.Sound('Space 8.wav')  # Make sure this file is in the same directory

# Load background music
pygame.mixer.music.load('intro.ogg')  # Background music: 'intro.ogg'
pygame.mixer.music.set_volume(0.5)  # Set default volume (50%) for the background music
pygame.mixer.music.play(-1)  # Play background music on loop

# Load sound for game over
game_over_sound = pygame.mixer.Sound('laugh.wav')  # Game over sound: 'laugh.wav'

# Define the ship class
class Ship:
    def __init__(self):
        self.image = pygame.image.load('SpaceShipSmall.png')  # Ship image
        self.rect = self.image.get_rect()  # Get the dimensions of the image
        self.rect.center = (screen_width // 2, screen_height - 50)  # Position the ship
        self.speed = 5

    def move(self, keys):
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.right < screen_width:
            self.rect.x += self.speed

# Define the Bullet class
class Bullet:
    def __init__(self, x, y):
        self.image = pygame.image.load('bullet.png')  # Bullet image
        self.image = pygame.transform.scale(self.image, (15, 25))  # Scale the bullet image smaller
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.speed = 7

    def move(self):
        self.rect.y -= self.speed  # Move the bullet upwards

# Define the Alien class
class Alien:
    def __init__(self, score):
        self.base_size = 40
        self.base_speed = 1
        
        level = score // 100  # Every 100 points, increase difficulty
        self.size = self.base_size + level * 10
        self.speed = self.base_speed + level * 0.5

        self.image = pygame.image.load('Alien_1.png')  # Alien image
        self.image = pygame.transform.scale(self.image, (self.size, self.size))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - self.rect.width)
        self.rect.y = random.randint(-150, -50)

    def move(self):
        self.rect.y += self.speed  # Move the alien downwards

# Function to display text on screen
def display_text(text, color, x, y):
    font = pygame.font.SysFont(None, 36)
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

# Function to adjust the volume of sounds
def adjust_volume(increase, sound_type):
    if sound_type == "background":
        current_volume = pygame.mixer.music.get_volume()
        new_volume = min(1.0, current_volume + 0.1) if increase else max(0.0, current_volume - 0.1)
        pygame.mixer.music.set_volume(new_volume)
    elif sound_type == "bullet":
        current_volume = bullet_sound.get_volume()
        new_volume = min(1.0, current_volume + 0.1) if increase else max(0.0, current_volume - 0.1)
        bullet_sound.set_volume(new_volume)

# Main game loop
def game_loop():
    global score
    score = 0
    ship = Ship()
    bullets = []
    aliens = []
    alien_spawn_time = 50
    running = True
    background_y = 0
    background_speed = 1
    start_ticks = pygame.time.get_ticks()  # Timer starts as soon as the game begins

    while running:
        screen.fill((0, 0, 0))  # Fill the screen with black first

        # Scroll the background for parallax effect
        background_y += background_speed
        if background_y >= screen_height:
            background_y = 0

        # Draw the background twice to create the scrolling effect
        screen.blit(background, (0, background_y))
        screen.blit(background, (0, background_y - screen_height))

        keys = pygame.key.get_pressed()

        # Check for events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bullet = Bullet(ship.rect.centerx, ship.rect.top)
                    bullets.append(bullet)
                    bullet_sound.play()
                elif event.key == pygame.K_PLUS or event.key == pygame.K_EQUALS:
                    adjust_volume(True, "background")
                elif event.key == pygame.K_MINUS:
                    adjust_volume(False, "background")
                elif event.key == pygame.K_0:
                    adjust_volume(True, "bullet")
                elif event.key == pygame.K_9:
                    adjust_volume(False, "bullet")

        # Move the ship
        ship.move(keys)

        # Spawn aliens
        if random.randint(1, alien_spawn_time) == 1:
            aliens.append(Alien(score))

        # Move and draw bullets
        for bullet in bullets[:]:
            bullet.move()
            if bullet.rect.bottom < 0:
                bullets.remove(bullet)
            screen.blit(bullet.image, bullet.rect)

        # Move and draw aliens
        for alien in aliens[:]:
            alien.move()
            if alien.rect.top > screen_height:
                aliens.remove(alien)
            if alien.rect.colliderect(ship.rect):  # Game over if ship collides with alien
                game_over()
                return
            screen.blit(alien.image, alien.rect)

        # Check if bullets hit aliens
        for bullet in bullets[:]:
            for alien in aliens[:]:
                if bullet.rect.colliderect(alien.rect):
                    aliens.remove(alien)
                    bullets.remove(bullet)
                    score += 10
                    break

        # Draw the ship
        screen.blit(ship.image, ship.rect)

        # Display the score
        display_text(f"Score: {score}", (255, 255, 255), 10, 10)

        # Update the display
        pygame.display.update()

        # Frame rate
        clock.tick(60)

def game_over():
    # Stop background music and play game over sound
    pygame.mixer.music.stop()
    game_over_sound.play()

    # Display game over image while playing sound
    game_over_image = pygame.image.load('gameover.png')
    game_over_image = pygame.transform.scale(game_over_image, (screen_width, screen_height))
    screen.blit(game_over_image, (0, 0))
    pygame.display.update()

    # Wait for the game over sound to finish
    time.sleep(game_over_sound.get_length())

    # After the sound finishes, clear the screen and show the play button
    screen.fill((0, 0, 0))  # Clear the screen to black
    play_button = pygame.image.load('play.png')
    play_button_rect = play_button.get_rect(center=(screen_width // 2, screen_height // 2))
    screen.blit(play_button, play_button_rect)
    pygame.display.update()

    # Wait for the play button click
    waiting_for_play = True
    while waiting_for_play:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if play_button_rect.collidepoint(event.pos):
                    pygame.mixer.music.play(-1)  # Restart background music
                    game_loop()  # Start a new game

# Load the initial screen and play button
screen.fill((0, 0, 0))  # Fill screen with black
play_button = pygame.image.load('play.png')
play_button_rect = play_button.get_rect(center=(screen_width // 2, screen_height // 2))
screen.blit(play_button, play_button_rect)
pygame.display.update()

# Wait for the user to click the play button
waiting_for_play = True
while waiting_for_play:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
        if event.type == pygame.MOUSEBUTTONDOWN:
            if play_button_rect.collidepoint(event.pos):
                pygame.mixer.music.play(-1)  # Start background music
                game_loop()  # Start the game
